// These could also be passed as parameters
def testPlanPath = 'https://raw.githubusercontent.com/fgiloux/auto-perf-test/master/jmeter/openshift/apt-jmx-cm.yaml' 
def testPlanName = 'apt-jmx' 
pipeline {
  agent {
    node {
      label 'nodejs'
    }
  }
  environment {
    JENKINS_URL = "https://jenkins-load-testing.apps.ocp4mcm-1603454788875.awssandbox.appopsonline.com"
  } 
  // triggers {
    // Execute the pipeline once a day with automated distribution.
    // cron('H H * * *')
  //}
  //options {
  //  timeout(time: 20, unit: 'MINUTES') 
  //}
  stages {
    stage('preamble') {
        steps {
            script {
                openshift.withCluster() {
                    openshift.withProject() {
                        echo "Using project: ${openshift.project()}"
                    }
                }
            }
        }
    }
    // The aim of this section is to make sure that the environment
    // has no left over. Delete and recreate provides confidence
    // and reproducibility.
   // stage('cleanup') {
    //  steps {
     //   script {
     //       openshift.withCluster() {
      //          openshift.withProject() {
                  // Deactivated for making demos quicker
                  /* openshift.selector("all", [ 'app' : 'camel-amq-fakeapp' ]).delete() */
                  // Secrets need to be addressed separately
                  /* if (openshift.selector("secrets", secretName).exists()) { 
                    openshift.selector("secrets", secretName).delete()
                  } */
        //          if (openshift.selector("all", [ "testplan" : testPlanName ]).exists()) {
        //              openshift.selector("all", [ "testplan" : testPlanName ]).delete()
        //          }
        //          if (openshift.selector("configMaps", [ "testplan" : testPlanName ]).exists()) {
        //              openshift.selector("configMaps", [ "testplan" : testPlanName ]).delete()
        //          }
                  /* openshift.selector("all", [ job-name : apt-jmeter ]).delete() */
       //         }
        //    }
       // }
    //  }
   // }
    // Template may be used to populate the environment
    // Not used here
    /* stage('create') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                  openshift.newApp(templatePath) 
                }
            }
        }
      }
    } */
    // This stage is for building the application from git repository
    stage('build') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                    // Deactivated for making demos quicker
                    /* def builds = openshift.selector("bc", 'camel-amq-fakeapp-s2i').startBuild("--wait=true") */
                }
            }
        }
      }
    }
    // This stage is provisioning the environment with specifics
    // This may include credentials and configMaps with endpoint information
    // A new deployment is started if no image change trigger is configured
    // in the deployment configuration, only wait for deployment completion otherwise
    // Test plans and datsets to be run are also create here.
 
    // This stage is for test execution
 
    // After tests have been successfully executed the image may be tagged accordingly
    stage('tag') {
      steps {
        script {
            openshift.withCluster() {
                openshift.withProject() {
                  openshift.tag("camel-amq-fakeapp:latest", "camel-amq-fakeapp:staging") 
                }
            }
        }
      }
    }
  }
}

